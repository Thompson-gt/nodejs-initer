this will be a project where i will generate a express js project using python,
it will be in the form of a CLI that creates the all of the neccesay files/dirs
with the users desided configuations and dependencies
the app is done in both procedural and object oriented because I couldn'
deside which version was cleaner



Fix: throw proper errors(rasie exceptions) instead of just printing(DONE)


Fix: handle when the file already exists, ask if want to overwrite the file or just end program(DONE)

Fix:handle re-run of the app if keyboard Interrupt/make sure to remove dir to 
    prevent throwing error when calling run again(DONE) 

Fix: make the methods called in the class private(DONE)

Fix: rewrite the re-run function to seperate the logic from the main function call
    and make the get path function private to prevent calling from outside the 
    class(DONE)


Fix: create the main fucntion to abstract away all the logic leaving a clean 
    function to be called(DONE)

Fix: handle error for when the program is interrupted during the construstor(DONE)
    idea: remove all the fucntions from the construtor and make them their own
        functions and call them during the run method then wrap the run method
        call in the try catch instead of the initalizing the class in try block


Fix: query the npmjs.com to get the package version numbers for inputed packages(DONE)
        npm endpoint docs  https://api-docs.npms.io/

Fix: handle the spliting of the string into queryable params(DONE)
        example:cross span needs to be cross+span


Fix: tell user how many dependencies entered not found when endpoint was queried(DONE)



Fix: make the request asynchronous to speed up the request time (DONE)
        can use the asyncio module, info for using this module at 
        "https://www.twilio.com/blog/asynchronous-http-requests-in-python-with-aiohttp"
        might have to append express and dotenv to the dependcies array to allow them to 
        be included in the asynchronous endpoint calls

Fix: alert the user of which dependcie is currently downloading(DONE)



Fix: better handle how the failed dependcies are displayed to the user after the 
        script is done running(DONE)


Fix: make a multithreaded call to the api to see if there is an increase in the speed 
        of the building of the package json
        (there is a problem of the threads not modifing the package object 
        the issue my be becuase it is implemented in a class so the threads are
        not getting the value)
        (possible fix is to define a thread in the construstor of the class
        but this will limit the max amout of threads to one thus making the asynchronous
        option of the call to the api bettter) (DONE) 

NOTE: calling thread.start will not return an instance of the thread making it impossible to 
        call join to make sure the threads run until finished

Fix: when using the multithreaded version the if the request doesnt return a version
        the app will crash(DONE)

Fix: clean up the function that call and joins the threads, try to limit the number
        of iterations of the threads array (DONE)



Fix: rework the fucntions that get user input to handle  misspelling of the expected input (DONE)


Fix: add a way to test to see the speed difference between the asynchronous fetch and the 
        multithreaded fetch of the version numbers from the npm api
        (this was done by timing the creation of the package json, not great but good enough
                results were threaded was slighly faster, really wasnt worth the switch
                was just good to get used to working with threads in python)

Fix: the errrors must extend a base exception so we dont get a type error
        when we raise custom errors(done)


Fix: add a reprompt option for when there is an error arises when getting input that
        will break the app if not correct else safe exit the program(done)

Fix: make functions to handle the exceptions instead of just putting all of the code 
        right in the raised function(done)

Fix: create a private fucntion to handle the safe exit of the program when needed(done)
Fix: take out the constants that dont need to be in the construstor(Done)

Fix: instead of using a lib to change the colors of the 
        output to the termial use ansi codes (can just google the codes)(DONE)

Fix: make a custom print to handle the setting of the color as well as re-setting the color for the termial text(DONE)

Fix: create a custom raise fucntion to handle the displaying of the errors (DONE)

Fix: the single file is getting too long for all of the logic, 
        create a main file to import all of the fucntionality and run the code(DONE)

Fix: create a function to validate the user input before attempting to use said input(DONE)

Fix: make a "time took" print once all of the projecct has been generated(DONE)

Fix: add a flag to just use some default settings for the project,(something like create it in current dir
        and some defalut names for those who dont want to go through all of the steps) (just going to do it by hand, 
                no point in importing a lib for one flag)(DONE)

Fix: allow an option to build the project with typescript(DONE)
Fix: create a function to build the tsc config file(DONE)
Fix: create a fucntion that will create the out folder for the compiled
        javascipt from typescript(DONE)
Fix: add a fucntion that will run the typescript install command and install all of 
        user inputed dependencies(DONE)

Fix: create a way to clear the screen(DONE)
Fix: display users input after clearing the screen (DONE)
Fix: modify the custom print to handle optional formating like tabs, new lines, and seperators
Fix: add a color enum to hold all of the colors(DONE)
Fix: add a static fucntion to return the ansi code for the given color(DONE)

                HOW TO RUN:
run this command to downlaod the dependcies from requirments.txt "pip install -r requirments.txt" 
run the project : windows : "python main.py" linux : "python3 main.py"
can also  be run using default settings using the default flag
        example: windows :"python main.py -d or python main.py --default"
        example: linux :"python3 main.py -d or python3 main.py --default"
        


